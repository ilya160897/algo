# project(algo)

cmake_minimum_required(VERSION 2.8)

set(CMAKE_CXX_COMPILER "/home/linuxbrew/.linuxbrew/bin/clang++")
# set(CMAKE_CXX_COMPILER "/home/linuxbrew/.linuxbrew/bin/g++-12")
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)
set(CMAKE_BUILD_TYPE Debug)
set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++20")


# macro(use_cxx20)
#   if (CMAKE_VERSION VERSION_LESS "3.1")
#     if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
#       set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++2a")
#     endif ()
#   else ()
#     set(CMAKE_CXX_STANDARD 20)
#   endif ()
# endmacro(use_cxx20)

# use_cxx20()

set(CMAKE_MODULE_PATH              "${CMAKE_SOURCE_DIR}/tools/cmake")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}")
set(CMAKE_EXPORT_COMPILE_COMMANDS  ON)

find_package(Catch REQUIRED)
find_package(PNG)
find_package(JPEG)

find_package(Poco QUIET COMPONENTS Foundation Net JSON)
if (NOT Poco_FOUND)
  message(STATUS "Seems like POCO is not installed on your machine.")
  message(STATUS "Tasks that depend on POCO are disabled.")
endif()

find_package(PythonLibs 3 QUIET)
if (NOT PythonLibs_FOUND)
  message(STATUS "python3 libraries not found. Python tasks are disabled.")
endif()

include(tools/cmake/TestSolution.cmake)
include(tools/cmake/BuildFlags.cmake)
include_directories(tools/util)

if (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/tests)
  add_subdirectory(tests)
endif()

function(add_task name)
  if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${name})
    add_subdirectory(${name})
  endif()
endfunction()

add_subdirectory(graph/graph)
add_subdirectory(graph/mst/prim_algorithm)

# add_task(samples/problem)
# add_task(hashmap/k_dominant_characters)
# add_task(math/almost_identity_permutations)
# add_task(linux/get_path_file_line)
# add_task(meet-in-the-middle/maximum_subsequence)
# add_task(binary_search/gadgets_for_dollars_and_pounds)
# add_task(graph/lca/binary_lifting)
add_task(math/lib/integer_log)
add_task(graph/lca/max_edge_up_to_lca)
# add_task(unk/k_segments_union)
# add_task(graph/mst/mst_for_each_edge)
# add_task(work/experiments/random_throw_verify_condition)
# add_task(stack/permutation_sqrt)
# add_task(stack/k_segments_union)
add_task(unk/comp_long_numbers)
add_task(unk/dinner_with_natasha)
add_task(unk/labyrinth)
add_task(unk/longest_k_good_segment)
add_task(unk/sum_of_remainders)
add_task(two-pointers/longest_k_good_segment)
